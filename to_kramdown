#!/usr/bin/ruby

####################################################################################
#
# This script parses ActiveRecord schema.rb files into markdown tables to
# document your database structure.
#
# It uses rails-erd gem to generate uml diagrams of the database.
#
# The table of contents is generated by the gen-toc script then inserted
# into the markdown file.
#
####################################################################################

require "net/http"
require "uri"

def remove_unwanted_characters(param)
  param.gsub(',','').gsub('"','')
end

def to_human_uppercase(param)
  param = param.split(' ')[1]
  parts = remove_unwanted_characters(param).gsub('_',' ').split(' ')
  uppercase_parts = Array.new
  parts.each do |part|
    uppercase_parts.push part.capitalize
  end
  uppercase_parts.join(' ')
end

def attribute_parts(params)
  name = nil
  value = nil
  default = '~'
  allow_null = '~'
  comment = ''

  parts = params.split(' ')
  name = remove_unwanted_characters(parts[1])
  value = parts.first.gsub('t.','')

  if params.include? 'default: '
    index = parts.index('default:') + 1
    default = "<code>#{parts[index].gsub(',','').strip}</code>"
  end

  if params.include? 'null: '
    index = parts.index('null:') + 1
    allow_null = "<code>#{parts[index].gsub(',','').strip}</code>"
  end

  if params.include? 'comment: '
    comment = " #{params.split('comment: ').last.gsub('"','').strip}"
  end

  {
    name: name,
    value: value,
    default: default,
    allow_null: allow_null,
    comment: comment
  }
end

def generate_images
  system "rake erd warn=false filetype='png' notation=bachman filename='erd_simple'"
  system "rake erd warn=false filetype='png' notation=bachman filename='erd_complex' polymorphism=true"
  system "mkdir -p mv erd_simple.png erd_complex.png app/assets/images"
end

def generate_tables
  count = 0
  File.open( 'db/schema.rb' ).each do |line|
    line = line.strip()
    unless line.start_with? '#'
      if line.include? 'create_table'
        count = count + 1
        @file.puts '  </tbody>' unless count == 1
        @file.puts "</table>" unless count == 1
        @file.puts ""
        @file.puts "### #{to_human_uppercase(line)}"
        @file.puts ""
        @file.puts '<table class="table table-bordered table-striped">'
        make_table_header
        @file.puts '  <tbody>'
      elsif line.start_with? 't.'
        unless line.include? 't.index'
          parts = attribute_parts(line)
          make_table_row(parts)
        end
      end
    end
  end
end

def make_table_header
  @file.puts '  <thead class="thead-dark">'
  @file.puts '    <tr>'
  @file.puts '      <th scope="col" nowrap="nowrap">Name</th>'
  @file.puts '      <th scope="col" nowrap="nowrap">Value</th>'
  @file.puts '      <th scope="col" nowrap="nowrap">Default</th>'
  @file.puts '      <th scope="col" nowrap="nowrap">Allow Null?</th>'
  @file.puts '      <th scope="col">Description</th>'
  @file.puts '    </tr>'
  @file.puts '  </thead>'
end

def make_table_row(parts)
@file.puts "    <tr>"
@file.puts "      <th scope=\"row\">#{parts[:name]}</th>"
@file.puts "      <td>#{parts[:value]}</td>"
@file.puts "      <td>#{parts[:default]}</td>"
@file.puts "      <td>#{parts[:allow_null]}</td>"
@file.puts "      <td>#{parts[:comment]}</td>"
@file.puts "    </tr>"
end

def generate_header
  @file.puts "# Database Schema"
  @file.puts "> This is a complete guide of the database structure"
  @file.puts ""
  @file.puts "<!--ts-->"
  @file.puts "<!--te-->"
  @file.puts ""
  @file.puts "## Table Descriptions"
end

def generate_toc
  system "gen-toc docs/db_schema.html.md"
end

############################START OF SCRIPT#########################################
@file = File.open('docs/db_schema.html.md', 'w')
generate_header
generate_tables
@file.close
generate_toc
############################END OF SCRIPT###########################################
