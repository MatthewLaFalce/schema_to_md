#!/usr/bin/ruby

####################################################################################
#
# This script parses ActiveRecord schema.rb files into markdown tables to
# document your database structure.
#
# This script then converts the markdown into html via Github API and generates a
# table of contents.
#
# The table of contents is then inserted into the markdown file
#
# This script accepts one parameter (your schema.rb file) and stores it as DB_SCHEMA
#
####################################################################################

require "net/http"
require "uri"

DB_SCHEMA = 'db/schema.rb'

system "rake erd warn=false filetype='png' notation=bachman filename='erd_simple'"
system "rake erd warn=false filetype='png' notation=bachman filename='erd_complex' polymorphism=true"
system "mkdir docs; mkdir docs/images; mv erd_* docs/images"

file = File.open('db_schema.md', 'w')
file.puts "# Database Schema"
file.puts "> This is a complete guide of the database structure"
file.puts ""
file.puts "<!--ts-->"
file.puts "<!--te-->"
file.puts ""
file.puts "## Database Diagram"
file.puts ""
file.puts "![alt text](images/erd_simple.png 'Simple ERD Diagram')"
file.puts "*Generated by [Rails ERD](https://voormedia.github.io/rails-erd/)"
file.puts ""
file.puts "> A more detailed diagram can be found [here](images/erd_complex.png)"
file.puts ""
file.puts "## Table Descriptions"

def remove_unwanted_characters(param)
  param.gsub(',','').gsub('"','')
end

def to_human_uppercase(param)
  param = param.split(' ')[1]
  parts = remove_unwanted_characters(param).gsub('_',' ').split(' ')
  uppercase_parts = Array.new
  parts.each do |part|
    uppercase_parts.push part.capitalize
  end
  uppercase_parts.join(' ')
end

def attribute_parts(params)
  name = nil
  value = nil
  default = '~'
  allow_null = '~'
  comment = ''

  parts = params.split(' ')

  name = remove_unwanted_characters(parts[1])
  value = parts.first.gsub('t.','')

  if params.include? 'default: '
    index = parts.index('default:') + 1
    default = "`#{parts[index].gsub(',','').strip}`"
  end

  if params.include? 'null: '
    index = parts.index('null:') + 1
    allow_null = "`#{parts[index].gsub(',','').strip}`"
  end

  if params.include? 'comment: '
    comment = " #{params.split('comment: ').last.gsub('"','').strip}"
  end

  {
    name: name,
    value: value,
    default: default,
    allow_null: allow_null,
    comment: comment
  }
end

#Generate and insert a toc at the beginning of the md file
def generate_toc(param)
  raw_html = md2html param

  if raw_html.include? 'XXNetworkErrorXX'
    puts "Parsing local markdown file requires access to github API"
    puts "Please make sure curl is installed and check your network connectivity"
    return
  elsif raw_html.include? 'XXRateLimitXX'
    puts "Parsing local markdown file requires access to github API"
    puts "Error: You exceeded the hourly limit. See: https://developer.github.com/v3/#rate-limiting"
    return
  else
    unless File.readlines('./db_schema.md').grep(/<!--ts-->/).size > 0 or File.readlines('./db_schema.md').grep(/<!--te-->/).size > 0
      puts "You don't have <!--ts--> or <!--te--> in your file...exiting"
      return
    end
  end
  puts raw_html
  # toc = grap_toc raw_html

  # before = param.split(/(?<=<!--ts-->)/).first
  # after = param.spit(/(?<=<!--te-->)/).second

  # before + toc + after
end

# Extracts the TOC from the rendered html
def grab_toc(params)

end

# Converts local md file into html via Github API
def md2html(param)
  uri = URI.parse("https://api.github.com/markdown/raw")
  request = Net::HTTP::Post.new(uri)
  request.content_type = "text/plain"
  request.body = ""
  request.body << File.read('./db_schema.md')

  req_options = {
    use_ssl: uri.scheme == "https",
  }

  response = Net::HTTP.start(uri.hostname, uri.port, req_options) do |http|
    http.request(request)
  end

  if response.code != '200'
    return 'XXNetworkErrorXX'
  elsif response.body.include? 'API rate limit exceeed'
    return 'XXRateLimitXX'
  else
    return response.body
  end
end


File.open( DB_SCHEMA ).each do |line|
  line = line.strip()
  unless line.start_with? '#'
    if line.include? 'create_table'
      file.puts ""
      file.puts "### #{to_human_uppercase(line)}"
      file.puts "| Name               | Value             | Default | Allow Null? | Description |"
      file.puts "| ------------------ | ----------------- | ------- | ----------- | ----------- |"
    elsif line.start_with? 't.'
      unless line.include? 't.index'
        parts = attribute_parts(line)
        file.puts "| #{parts[:name]} | #{parts[:value]} | #{parts[:default]} | #{parts[:allow_null]} |#{parts[:comment]}"
      end
    end
  end
end

file.close

system "gen-toc db_schema.md"
system "mv db_schema.md docs"

# generate_toc file
